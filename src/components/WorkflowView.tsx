import { useState } from 'react';
import { useScriptContext } from '../context/ScriptContext';
import { WorkflowStep } from '../types';

export default function WorkflowView() {
  const { currentScript, updateScript } = useScriptContext();
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [targetStep, setTargetStep] = useState<WorkflowStep | null>(null);
  const [stepWarning, setStepWarning] = useState<string | null>(null);
  
  if (!currentScript) {
    return null;
  }

  const steps: { id: WorkflowStep; label: string; icon: string; requiresPrevious: boolean; validator: () => boolean; warningMessage: string }[] = [
    { 
      id: 'outline', 
      label: 'Â§ßÁ∫≤', 
      icon: 'üìù',
      requiresPrevious: false,
      validator: () => true, // Â§ßÁ∫≤‰Ωú‰∏∫Á¨¨‰∏ÄÊ≠•ÔºåÊ≤°ÊúâÂâçÁΩÆÊù°‰ª∂
      warningMessage: '' 
    },
    { 
      id: 'characters', 
      label: '‰∫∫Áâ©ËÆæÂÆö', 
      icon: 'üë§',
      requiresPrevious: true,
      validator: () => (currentScript.outline || '').length > 50, // Ë¶ÅÊ±ÇÂ§ßÁ∫≤Ëá≥Â∞ëÊúâ‰∏ÄÂÆöÂÜÖÂÆπ
      warningMessage: 'ËØ∑ÂÖàÂÆåÂñÑÂâßÊú¨Â§ßÁ∫≤ÔºàËá≥Â∞ë50‰∏™Â≠óÁ¨¶Ôºâ' 
    },
    { 
      id: 'relationships', 
      label: 'ËßíËâ≤ÂÖ≥Á≥ª', 
      icon: 'üîÑ',
      requiresPrevious: true,
      validator: () => (currentScript.characters || []).length >= 2, // Ëá≥Â∞ëÈúÄË¶Å2‰∏™ËßíËâ≤ÊâçËÉΩÂª∫Á´ãÂÖ≥Á≥ª
      warningMessage: 'ËØ∑ÂÖàÂàõÂª∫Ëá≥Â∞ë2‰∏™ËßíËâ≤' 
    },
    { 
      id: 'scenes', 
      label: 'ÂàÜÂπï', 
      icon: 'üé¨',
      requiresPrevious: true,
      validator: () => {
        // Ê£ÄÊü•ÊòØÂê¶Ëá≥Â∞ëÊúâ‰∏Ä‰∏™ËßíËâ≤ÂÖ≥Á≥ª
        return (currentScript.characters || []).some((character: any) => character.relationships.length > 0);
      },
      warningMessage: 'ËØ∑ÂÖàÂÆö‰πâËá≥Â∞ë‰∏Ä‰∏™ËßíËâ≤ÂÖ≥Á≥ª' 
    },
    { 
      id: 'draft', 
      label: 'ÂàùÁ®ø', 
      icon: 'üìÑ',
      requiresPrevious: true,
      validator: () => (currentScript.scenes || []).length > 0, // Ëá≥Â∞ëÈúÄË¶Å‰∏Ä‰∏™Âú∫ÊôØ
      warningMessage: 'ËØ∑ÂÖàÂàõÂª∫Ëá≥Â∞ë‰∏Ä‰∏™Âú∫ÊôØ' 
    },
  ];

  const currentStepIndex = steps.findIndex(step => step.id === currentScript.currentStep);
  
  // Ê†πÊçÆÂΩìÂâçÂÜÖÂÆπÁîüÊàê‰∏ã‰∏ÄÊ≠•ÁöÑÂÜÖÂÆπ
  const generateNextStepContent = (targetStepId: WorkflowStep) => {
    const currentStepId = currentScript.currentStep;
    
    // ÂßãÁªà‰øùÂ≠òÂΩìÂâçÂÜÖÂÆπÔºåÁ°Æ‰øùÂàáÊç¢Ê≠•È™§Êó∂‰∏ç‰ºö‰∏¢Â§±
    const updatedScript = { ...currentScript };
    
    // Â¶ÇÊûú‰ªéÂ§ßÁ∫≤Âà∞‰∫∫Áâ©ËÆæÂÆöÔºåÂü∫‰∫éÂ§ßÁ∫≤ÊèêÂèñÂèØËÉΩÁöÑËßíËâ≤
    if (currentStepId === 'outline' && targetStepId === 'characters') {
      // ËøôÈáåÁÆÄÂçïÂÆûÁé∞‰ªéÂ§ßÁ∫≤‰∏≠ÊèêÂèñ@Ê†áËÆ∞ÁöÑËßíËâ≤Âêç
      const characterMatches = currentScript.outline.match(/@(\w+)/g) || [];
      const extractedCharacters = characterMatches.map(match => ({
        name: match.substring(1), // ÂéªÊéâ@Á¨¶Âè∑
        description: `‰ªéÂ§ßÁ∫≤‰∏≠ÊèêÂèñÁöÑËßíËâ≤Ôºö${match.substring(1)}`,
        background: '',
        id: crypto.randomUUID(),
        relationships: []
      }));
      
      // Â¶ÇÊûúÊúâÊèêÂèñÂà∞ËßíËâ≤‰∏îÂΩìÂâçÊ≤°ÊúâËßíËâ≤ÔºåÂ∞±Ê∑ªÂä†Âà∞ËÑöÊú¨‰∏≠
      if (extractedCharacters.length > 0 && (currentScript.characters || []).length === 0) {
        updatedScript.characters = extractedCharacters;
        updatedScript.currentStep = targetStepId;
        updateScript(updatedScript);
        return true;
      }
    }
    
    // Â¶ÇÊûú‰ªé‰∫∫Áâ©ËÆæÂÆöÂà∞ËßíËâ≤ÂÖ≥Á≥ªÔºå‰ΩÜËøòÊ≤°ÊúâÂÖ≥Á≥ªÂÆö‰πâ
    if (currentStepId === 'characters' && targetStepId === 'relationships') {
      // Ê£ÄÊü•ÊòØÂê¶ÊâÄÊúâËßíËâ≤ÈÉΩÊ≤°ÊúâÂÖ≥Á≥ª
      const noRelationshipsDefined = (currentScript.characters || []).every((char: any) => 
        char.relationships.length === 0
      );
      
      if (noRelationshipsDefined && (currentScript.characters || []).length >= 2) {
        // ‰∏∫ÁÆÄÂçïËµ∑ËßÅÔºåËøôÈáåÂè™ÊòØ‰∏∫Á¨¨‰∏Ä‰∏™ËßíËâ≤Ê∑ªÂä†‰∏éÁ¨¨‰∫å‰∏™ËßíËâ≤ÁöÑÂÖ≥Á≥ª
        const updatedCharacters = [...(currentScript.characters || [])];
        if (updatedCharacters.length >= 2) {
          updatedCharacters[0] = {
            ...updatedCharacters[0],
            relationships: [
              ...updatedCharacters[0].relationships,
              {
                target: updatedCharacters[1].id,
                source: updatedCharacters[0].id,
                type: 'Êú™Áü•ÂÖ≥Á≥ª',
                description: 'ËØ∑Âú®Ê≠§ÊèèËø∞ËßíËâ≤ÂÖ≥Á≥ª'
              }
            ]
          };
          
          updatedScript.characters = updatedCharacters;
          updatedScript.currentStep = targetStepId;
          updateScript(updatedScript);
          return true;
        }
      }
    }
    
    // Â¶ÇÊûú‰ªéËßíËâ≤ÂÖ≥Á≥ªÂà∞ÂàÜÂπïÔºå‰ΩÜËøòÊ≤°ÊúâÂú∫ÊôØ
    if (currentStepId === 'relationships' && targetStepId === 'scenes' && (currentScript.scenes || []).length === 0) {
      // ÂàõÂª∫‰∏Ä‰∏™Âü∫Á°ÄÂú∫ÊôØ
      const newScene = {
        id: crypto.randomUUID(),
        title: 'Á¨¨‰∏ÄÂπï',
        description: 'Âü∫‰∫éËßíËâ≤ÂÖ≥Á≥ªÁöÑÂàùÂßãÂú∫ÊôØ',
        characters: (currentScript.characters || []).map((char: any) => char.id), // ÂåÖÂê´ÊâÄÊúâËßíËâ≤
        content: 'Âú®Ê≠§ÁºñÂÜôÂú∫ÊôØÂÜÖÂÆπ',
        order: 0
      };
      
      updatedScript.scenes = [newScene];
      updatedScript.currentStep = targetStepId;
      updateScript(updatedScript);
      return true;
    }
    
    // Â¶ÇÊûú‰ªéÂàÜÂπïÂà∞ÂàùÁ®øÔºå‰ΩÜÂàùÁ®ø‰∏∫Á©∫
    if (currentStepId === 'scenes' && targetStepId === 'draft') {
      // Âü∫‰∫éÁé∞ÊúâÂú∫ÊôØÁîüÊàêÂàùÁ®øÊ°ÜÊû∂
      const draftSections = (currentScript.scenes || [])
        .sort((a: any, b: any) => a.order - b.order)
        .map((scene: any) => 
          `## ${scene.title}\n\n${scene.description}\n\nÂèÇ‰∏éËßíËâ≤Ôºö${
            scene.characters.map((charId: string) => {
              const character = (currentScript.characters || []).find((c: any) => c.id === charId);
              return character ? character.name : 'Êú™Áü•ËßíËâ≤';
            }).join('„ÄÅ')
          }\n\n${scene.content}\n\n---\n\n`
        ).join('');
      
      const fullDraft = `# ${currentScript.title} - ÂàùÁ®ø\n\n${draftSections}`;
      
      // Êõ¥Êñ∞ËÑöÊú¨ÂÜÖÂÆπ
      updatedScript.outline = fullDraft;
      updatedScript.currentStep = targetStepId;
      updateScript(updatedScript);
      return true;
    }
    
    // ÈªòËÆ§Êõ¥Êñ∞Ê≠•È™§Áä∂ÊÄÅ
    updatedScript.currentStep = targetStepId;
    updateScript(updatedScript);
    return false;
  };

  const handleStepClick = (stepId: WorkflowStep, stepIndex: number) => {
    // Â¶ÇÊûúÁÇπÂáªÂΩìÂâçÊ≠•È™§Ôºå‰∏çÂÅö‰ªª‰ΩïÊìç‰Ωú
    if (stepId === currentScript.currentStep) {
      return;
    }
    
    const step = steps.find(s => s.id === stepId);
    
    // ÂêëÂêéË∑≥ËΩ¨ÔºöÊ£ÄÊü•ÊòØÂê¶Êª°Ë∂≥Êù°‰ª∂
    if (stepIndex > currentStepIndex) {
      // Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÊåâÈ°∫Â∫èÂÆåÊàê
      if (step?.requiresPrevious && stepIndex > currentStepIndex + 1) {
        setStepWarning('ËØ∑ÊåâÁÖßÂ∑•‰ΩúÊµÅÈ°∫Â∫èÂÆåÊàêÊØè‰∏™Ê≠•È™§');
        setTimeout(() => setStepWarning(null), 3000);
        return;
      }
      
      // Ê£ÄÊü•ÂΩìÂâçÊ≠•È™§ÊòØÂê¶Êª°Ë∂≥ÂâçÁΩÆÊù°‰ª∂
      if (!step?.validator()) {
        setStepWarning(step?.warningMessage || 'ËØ∑ÂÖàÂÆåÊàêÂΩìÂâçÊ≠•È™§ÁöÑÂøÖË¶ÅÂÜÖÂÆπ');
        setTimeout(() => setStepWarning(null), 3000);
        return;
      }
      
      // ËØ¢ÈóÆÊòØÂê¶Ë¶ÅÁîüÊàê‰∏ã‰∏ÄÊ≠•ÂÜÖÂÆπ
      setTargetStep(stepId);
      setShowConfirmDialog(true);
      return;
    }
    
    // ÂêëÂâçË∑≥ËΩ¨ÔºöË≠¶ÂëäÂèØËÉΩ‰∏¢Â§±Êï∞ÊçÆ
    setTargetStep(stepId);
    setShowConfirmDialog(true);
  };

  const confirmStepChange = () => {
    if (!targetStep) return;
    
    generateNextStepContent(targetStep);
    setShowConfirmDialog(false);
    setTargetStep(null);
  };

  const cancelStepChange = () => {
    setShowConfirmDialog(false);
    setTargetStep(null);
  };

  return (
    <div className="bg-white shadow rounded-lg p-4 mb-6 relative">
      {stepWarning && (
        <div className="absolute top-0 left-0 right-0 bg-yellow-100 text-yellow-800 px-4 py-2 rounded-t-lg text-center animate-fadeIn">
          {stepWarning}
        </div>
      )}
      
      <h2 className="text-lg font-semibold text-gray-800 mb-4">Âàõ‰ΩúÂ∑•‰ΩúÊµÅ</h2>
      
      <div className="relative">
        {/* Connecting Line */}
        <div className="absolute top-5 left-5 right-5 h-0.5 bg-gray-200 z-0" />
        
        {/* Steps */}
        <div className="flex justify-between relative z-10">
          {steps.map((step, index) => {
            const isActive = currentStepIndex === index;
            const isCompleted = currentStepIndex > index;
            const isDisabled = index > currentStepIndex + 1;
            
            return (
              <div key={step.id} className="flex flex-col items-center">
                {/* ‰ΩøÁî®Ê∞¥Âπ≥Â∏ÉÂ±Ä */}
                <button
                  onClick={() => handleStepClick(step.id, index)}
                  className={`w-10 h-10 rounded-full flex items-center justify-center text-lg mb-1
                    ${isActive 
                      ? 'bg-blue-600 text-white' 
                      : isCompleted 
                        ? 'bg-green-500 text-white' 
                        : isDisabled
                          ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                          : 'bg-gray-200 text-gray-500 hover:bg-gray-300'}`}
                  disabled={isDisabled}
                >
                  {step.icon}
                </button>
                <span 
                  className={`text-sm ${isActive ? 'font-medium text-blue-600' : isDisabled ? 'text-gray-400' : 'text-gray-500'}`}
                >
                  {step.label}
                </span>
              </div>
            );
          })}
        </div>
      </div>

      {/* Current Step Guidance */}
      <div className="mt-4 pt-4 border-t border-gray-100">
        <h3 className="font-medium text-gray-800 mb-1">
          ÂΩìÂâçÊ≠•È™§: {steps[currentStepIndex].label}
        </h3>
        <p className="text-sm text-gray-600">
          {currentScript.currentStep === 'outline' && 'ÂàõÂª∫ÂâßÊú¨Â§ßÁ∫≤ÔºåÁ°ÆÂÆö‰∏ªË¶ÅÊïÖ‰∫ãÊû∂ÊûÑÂíåÂèô‰∫ãËµ∞Âêë„ÄÇÊèêÁ§∫Ôºö‰ΩøÁî®@ËßíËâ≤ÂêçÂèØ‰ª•Ê†áËÆ∞ËßíËâ≤ÔºåÊúâÂä©‰∫é‰∏ã‰∏ÄÊ≠•Ëá™Âä®ÊèêÂèñËßíËâ≤„ÄÇ'}
          {currentScript.currentStep === 'characters' && 'ËÆæËÆ°‰∏ªË¶ÅËßíËâ≤ÔºåÂåÖÊã¨ËÉåÊôØ„ÄÅÂä®Êú∫ÂíåÊÄßÊ†ºÁâπÁÇπ„ÄÇÁ°Æ‰øùÊ∑ªÂä†Ëá≥Â∞ë‰∏§‰∏™ËßíËâ≤‰ª•‰æøÂª∫Á´ãÂÖ≥Á≥ªÁΩëÁªú„ÄÇ'}
          {currentScript.currentStep === 'relationships' && 'ÂÆö‰πâËßíËâ≤‰πãÈó¥ÁöÑÂÖ≥Á≥ªÁΩëÁªúÂíå‰∫íÂä®ÊñπÂºè„ÄÇËøô‰∫õÂÖ≥Á≥ªÂ∞ÜÂΩ±ÂìçÂêéÁª≠ÂâßÊÉÖÁöÑÂèëÂ±ïÂíåÂÜ≤Á™ÅËÆæÁΩÆ„ÄÇ'}
          {currentScript.currentStep === 'scenes' && 'Â∞ÜÊïÖ‰∫ãÂàíÂàÜ‰∏∫Â§ö‰∏™Âú∫ÊôØÔºåÁ°ÆÂÆöÊØè‰∏™Âú∫ÊôØÁöÑËßíËâ≤Âíå‰∫ã‰ª∂„ÄÇÊ†πÊçÆËßíËâ≤ÂÖ≥Á≥ªËÆæËÆ°ÊúâÊÑè‰πâÁöÑ‰∫íÂä®ÂíåÂÜ≤Á™Å„ÄÇ'}
          {currentScript.currentStep === 'draft' && 'Êí∞ÂÜôÂÆåÊï¥ÂâßÊú¨ÂàùÁ®øÔºåËûçÂêàÂâçÈù¢Ê≠•È™§‰∏≠ÁöÑÊâÄÊúâÂÖÉÁ¥†„ÄÇÊ≠§Â§ÑÂÜÖÂÆπÂ∞Ü‰Ωú‰∏∫ÊúÄÁªàÊàêÊûúÔºåÂèØÈöèÊó∂ÂõûÂà∞ÂâçÈù¢Ê≠•È™§‰øÆÊîπÁªÜËäÇ„ÄÇ'}
        </p>
      </div>
      
      {/* Step Change Confirmation Dialog */}
      {showConfirmDialog && targetStep && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h3 className="text-lg font-bold mb-3">ÂàáÊç¢Âàõ‰ΩúÊ≠•È™§</h3>
            
            <p className="mb-4 text-gray-600">
              {currentStepIndex < steps.findIndex(s => s.id === targetStep)
                ? 'ÊòØÂê¶Ë¶ÅËøõÂÖ•‰∏ã‰∏Ä‰∏™Âàõ‰ΩúÊ≠•È™§ÔºüÁ≥ªÁªüÂ∞ÜÂ∞ùËØïÂü∫‰∫éÂΩìÂâçÂÜÖÂÆπËá™Âä®ÁîüÊàêËçâÁ®ø„ÄÇ'
                : 'Ë≠¶ÂëäÔºöÂõûÂà∞Ââç‰∏ÄÊ≠•ÂèØËÉΩ‰ºöÂΩ±ÂìçÂ∑≤ÂàõÂª∫ÁöÑÂêéÁª≠ÂÜÖÂÆπ„ÄÇÁ°ÆÂÆöË¶ÅËøîÂõûÂêóÔºü'}
            </p>
            
            <div className="flex justify-end space-x-3">
              <button
                onClick={cancelStepChange}
                className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
              >
                ÂèñÊ∂à
              </button>
              <button
                onClick={confirmStepChange}
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
              >
                Á°ÆËÆ§
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
} 